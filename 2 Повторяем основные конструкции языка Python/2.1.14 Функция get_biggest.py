# –§—É–Ω–∫—Ü–∏—è get_biggest() üå∂Ô∏èüå∂Ô∏è
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_biggest(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# numbers ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ —á–∏—Å–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞ numbers. –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ numbers
# –ø—É—Å—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ ‚àí1.

from functools import reduce


def get_biggest(numbers):
    if len(numbers) == 0:
        return -1
    nums = sorted(numbers, key=lambda x: str(x) * max(numbers), reverse=True)
    res = int(reduce(lambda r, e: r + str(e), nums, ''))
    return res
